name: Terraform Format Check

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - closed
      - labeled
    branches:
      - main

jobs:
  terraform_format_check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Check Terraform format
        run: terraform fmt -check -recursive

  check_lable:
    runs-on: ubuntu-latest
    needs: terraform_format_check
    steps:
      - name: Check lables
        uses: actions/github-script@v6
        with:
          script: |
            const labels = context.payload.pull_request.labels;
            if (labels.some(label => label.name === 'major')) {
              console.log('PR will bump major version');
            } else if (labels.some(label => label.name === 'minor')) {
              console.log('PR will bump minor version');
            } else if (labels.some(label => label.name === 'patch')) {
              console.log('PR will bump patch version');
            } else {
              core.setFailed('No label found, please add one of the following labels to the PR: major, minor, patch');
            }

  publish_version:
    runs-on: ubuntu-latest
    needs: check_lable
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Calculate new version
        uses: actions/github-script@v6
        id: calculate_version
        with:
          script: |
            let latestReleaseVersion;
            if (context.payload.repository.releases === undefined) {
              latestReleaseVersion = 'v0.0.0';
            } else {
              latestReleaseVersion = context.payload.repository.releases[0].tag_name;
            }
            const versionNumber = latestReleaseVersion.substring(1);
            const labels = context.payload.pull_request.labels;
            const versionParts = versionNumber.split('.');
            const major = parseInt(versionParts[0]);
            const minor = parseInt(versionParts[1]);
            const patch = parseInt(versionParts[2]);
            let newVersion = '';
            if (labels.some(label => label.name === 'major')) {
              newVersion = `${major + 1}.0.0`;
            } else if (labels.some(label => label.name === 'minor')) {
              newVersion = `${major}.${minor + 1}.0`;
            } else if (labels.some(label => label.name === 'patch')) {
              newVersion = `${major}.${minor}.${patch + 1}`;
            } else {
              throw new Error('No label found');
            }
            core.setOutput('new_version', newVersion);
            core.setOutput('version', version);

      - name: Publish release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v.${{ steps.calculate_version.outputs.new_version }}"
          generate_release_notes: true
